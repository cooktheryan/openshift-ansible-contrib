AWSTemplateFormatVersion: '2010-09-09'
Description: OpenShift VPC and Subnets Template
Outputs:
  VpcId:
    Description: Vpc Id
    Value:
      Ref: Vpc
  VpcSubnets:
    Description: VPC Subnets
    Value:
      'Fn::Join':
      - ','
      - - Ref: PrivateSubnet1
        - 'Fn::If':
          - CreateSubnet2
          - Ref: PrivateSubnet2
          - Ref: 'AWS::NoValue'
        - 'Fn::If':
          - CreateSubnet3
          - Ref: PrivateSubnet3
          - Ref: 'AWS::NoValue'
        - 'Fn::If':
          - CreateSubnet4
          - Ref: PrivateSubnet4
          - Ref: 'AWS::NoValue'
  VpcPublicSubnets:
    Description: VPC Public Subnets
    Value:
      'Fn::Join':
      - ','
      - - Ref: PublicSubnet1
        - 'Fn::If':
          - CreateSubnet2
          - Ref: PublicSubnet2
          - Ref: 'AWS::NoValue'
        - 'Fn::If':
          - CreateSubnet3
          - Ref: PublicSubnet3
          - Ref: 'AWS::NoValue'
        - 'Fn::If':
          - CreateSubnet4
          - Ref: PublicSubnet4
          - Ref: 'AWS::NoValue'

Parameters:
  VpcName:
    Type: String
  VpcCidrBlock:
    Type: String
  NumSubnets:
    Type: Number
    MinValue: 1
    MaxValue: 4
    Default: 1
  SubnetAvailabilityZones:
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  SubnetCidrBlocks:
    Type: CommaDelimitedList
  PublicSubnetCidrBlocks:
    Type: CommaDelimitedList
Conditions:
  CreateSubnet2:
    'Fn::Not':
    - 'Fn::Equals':
      - Ref: NumSubnets
      - 1
  CreateSubnet3:
    'Fn::Or':
    - 'Fn::Equals':
      - Ref: NumSubnets
      - 3
    - 'Fn::Equals':
      - Ref: NumSubnets
      - 4
  CreateSubnet4:
    'Fn::Equals':
    - Ref: NumSubnets
    - 4
Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:
        Ref: VpcCidrBlock
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
      - Key: Name
        Value:
          Ref: VpcName
  VpcInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VpcGA:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId:
        Ref: VpcInternetGateway
      VpcId:
        Ref: Vpc
  VpcPublicRouteTable:
    Properties:
      VpcId:
        Ref: Vpc
    Type: 'AWS::EC2::RouteTable'
  VPCRouteInternetGateway:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcInternetGateway
      RouteTableId:
        Ref: VpcPublicRouteTable
    Type: 'AWS::EC2::Route'
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
    - Vpc
    Properties:
      AvailabilityZone:
        'Fn::Select':
        - 0
        - Ref: SubnetAvailabilityZones
      CidrBlock:
        'Fn::Select':
        - 0
        - Ref: PublicSubnetCidrBlocks
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: Vpc
  PublicSubnet1RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: VpcPublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateSubnet2
    DependsOn:
    - Vpc
    Properties:
      AvailabilityZone:
        'Fn::Select':
        - 1
        - Ref: SubnetAvailabilityZones
      CidrBlock:
        'Fn::Select':
        - 1
        - Ref: PublicSubnetCidrBlocks
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: Vpc
  PublicSubnet2RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreateSubnet2
    Properties:
      RouteTableId:
        Ref: VpcPublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateSubnet3
    DependsOn:
    - Vpc
    Properties:
      AvailabilityZone:
        'Fn::Select':
        - 2
        - Ref: SubnetAvailabilityZones
      CidrBlock:
        'Fn::Select':
        - 2
        - Ref: PublicSubnetCidrBlocks
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: Vpc
  PublicSubnet3RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreateSubnet3
    Properties:
      RouteTableId:
        Ref: VpcPublicRouteTable
      SubnetId:
        Ref: PublicSubnet3
  PublicSubnet4:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateSubnet4
    DependsOn:
    - Vpc
    Properties:
      AvailabilityZone:
        'Fn::Select':
        - 3
        - Ref: SubnetAvailabilityZones
      CidrBlock:
        'Fn::Select':
        - 3
        - Ref: PublicSubnetCidrBlocks
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: Vpc
  PublicSubnet4RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreateSubnet4
    Properties:
      RouteTableId:
        Ref: VpcPublicRouteTable
      SubnetId:
        Ref: PublicSubnet4
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  Nat:
    Type: 'AWS::EC2::NatGateway'
    DependsOn:
    - EIP
    Properties:
      AllocationId:
        'Fn::GetAtt':
        - EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
  VpcPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
    - Nat
    Properties:
      VpcId:
        Ref: Vpc
  PrivateNatRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
    - Nat
    Properties:
      RouteTableId:
        Ref: VpcPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: Nat
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
    - Nat
    Properties:
      AvailabilityZone:
        'Fn::Select':
        - 0
        - Ref: SubnetAvailabilityZones
      CidrBlock:
        'Fn::Select':
        - 0
        - Ref: SubnetCidrBlocks
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: Vpc
  PrivateSubnet1RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: VpcPrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateSubnet2
    DependsOn:
    - Nat
    Properties:
      AvailabilityZone:
        'Fn::Select':
        - 1
        - Ref: SubnetAvailabilityZones
      CidrBlock:
        'Fn::Select':
        - 1
        - Ref: SubnetCidrBlocks
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: Vpc
  PrivateSubnet2RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreateSubnet2
    Properties:
      RouteTableId:
        Ref: VpcPrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet2
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateSubnet3
    DependsOn:
    - Nat
    Properties:
      AvailabilityZone:
        'Fn::Select':
        - 2
        - Ref: SubnetAvailabilityZones
      CidrBlock:
        'Fn::Select':
        - 2
        - Ref: SubnetCidrBlocks
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: Vpc
  PrivateSubnet3RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreateSubnet3
    Properties:
      RouteTableId:
        Ref: VpcPrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet3
  PrivateSubnet4:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateSubnet4
    DependsOn:
    - Nat
    Properties:
      AvailabilityZone:
        'Fn::Select':
        - 3
        - Ref: SubnetAvailabilityZones
      CidrBlock:
        'Fn::Select':
        - 3
        - Ref: SubnetCidrBlocks
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: Vpc
  PrivateSubnet4RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreateSubnet4
    Properties:
      RouteTableId:
        Ref: VpcPrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet4
